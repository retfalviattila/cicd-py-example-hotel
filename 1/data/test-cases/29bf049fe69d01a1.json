{"uid":"29bf049fe69d01a1","name":"Hootel Login","fullName":"test.test_hootel.TestHootel#test_login","historyId":"1c574e300f01ee8dbb888f7ace0438ff","time":{"start":1708627278265,"stop":1708627278291,"duration":26},"description":"A belépés tesztelése","descriptionHtml":"<p>A belépés tesztelése</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=121.0.6167.184)\nStacktrace:\n#0 0x55b6f0963303 <unknown>\n#1 0x55b6f06480f7 <unknown>\n#2 0x55b6f0694f19 <unknown>\n#3 0x55b6f0688617 <unknown>\n#4 0x55b6f06b6382 <unknown>\n#5 0x55b6f0687f88 <unknown>\n#6 0x55b6f06b654e <unknown>\n#7 0x55b6f06d507c <unknown>\n#8 0x55b6f06b6123 <unknown>\n#9 0x55b6f0686095 <unknown>\n#10 0x55b6f068709e <unknown>\n#11 0x55b6f09276ab <unknown>\n#12 0x55b6f092b4ba <unknown>\n#13 0x55b6f0913f85 <unknown>\n#14 0x55b6f092c12f <unknown>\n#15 0x55b6f08f7e6f <unknown>\n#16 0x55b6f09505f8 <unknown>\n#17 0x55b6f09507c2 <unknown>\n#18 0x55b6f09624a4 <unknown>\n#19 0x7f4319294ac3 <unknown>","statusTrace":"self = <test_hootel.TestHootel object at 0x7f26ceee4cd0>\n\n    @allure.title(\"Hootel Login\")\n    @allure.description(\"A belépés tesztelése\")\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @allure.tag(\"login\")\n    def test_login(self):\n        login_btn = self.browser.find_element(By.XPATH, '//a[@class=\"nav-link\"]')\n>       login_btn.click()\n\ntest/test_hootel.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f26ceee5360>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55b6f09507c2 \\\\u003Cunknown>\\\\n#18 0x55b6f09624a4 \\\\u003Cunknown>\\\\n#19 0x7f4319294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=121.0.6167.184)\nE       Stacktrace:\nE       #0 0x55b6f0963303 <unknown>\nE       #1 0x55b6f06480f7 <unknown>\nE       #2 0x55b6f0694f19 <unknown>\nE       #3 0x55b6f0688617 <unknown>\nE       #4 0x55b6f06b6382 <unknown>\nE       #5 0x55b6f0687f88 <unknown>\nE       #6 0x55b6f06b654e <unknown>\nE       #7 0x55b6f06d507c <unknown>\nE       #8 0x55b6f06b6123 <unknown>\nE       #9 0x55b6f0686095 <unknown>\nE       #10 0x55b6f068709e <unknown>\nE       #11 0x55b6f09276ab <unknown>\nE       #12 0x55b6f092b4ba <unknown>\nE       #13 0x55b6f0913f85 <unknown>\nE       #14 0x55b6f092c12f <unknown>\nE       #15 0x55b6f08f7e6f <unknown>\nE       #16 0x55b6f09505f8 <unknown>\nE       #17 0x55b6f09507c2 <unknown>\nE       #18 0x55b6f09624a4 <unknown>\nE       #19 0x7f4319294ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestHootel","time":{"start":1708627275044,"stop":1708627278265,"duration":3221},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestHootel::0","time":{"start":1708627278347,"stop":1708627278405,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"trivial"},{"name":"tag","value":"login"},{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_hootel"},{"name":"subSuite","value":"TestHootel"},{"name":"host","value":"fv-az1019-939"},{"name":"thread","value":"2285-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_hootel"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"trivial","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["login"]},"source":"29bf049fe69d01a1.json","parameterValues":[]}